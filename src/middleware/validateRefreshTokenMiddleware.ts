import { Request } from 'express';
import { Config } from '../config/index';
import { expressjwt } from 'express-jwt';
import { AuthCookie } from '../types/index';
import { AppDataSource } from '../config/data-source';
import { RefreshToken } from '../entity/RefreshToken';
import logger from '../config/logger';

export default expressjwt({
    secret: Config.REFRESH_TOKEN_SECRETKEY!,
    algorithms: ['HS256'],
    //if not found in auth headers, check in cookies
    getToken(req: Request) {
        const { refreshToken } = req.cookies as AuthCookie;
        return refreshToken;
    },
    async isRevoked(req: Request, token) {
        type RefreshTokenPayload = {
            id: string;
        };
        try {
            const refreshTokenRepository =
                AppDataSource.getRepository(RefreshToken);
            const refreshToken = await refreshTokenRepository.findOne({
                where: {
                    //autogenerated refreshTokenSchemaColumnId
                    id: Number((token?.payload as RefreshTokenPayload).id),
                    //userid
                    user: { id: Number(token?.payload.sub) },
                },
            });
            return refreshToken === null;
        } catch (err) {
            logger.error('Error while getting the refreshToken', {
                id: Number((token?.payload as RefreshTokenPayload).id),
            });
            return true;
        }
    },
});
